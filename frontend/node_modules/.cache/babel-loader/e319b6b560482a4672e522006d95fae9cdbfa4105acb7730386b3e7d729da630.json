{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Son\\\\Desktop\\\\\\uBBFC\\uADE0\\\\\\uD559\\uAD50 \\uC218\\uC5C5\\\\\\uC804\\uACF5\\\\ADL\\\\WTN\\\\blog\\\\src\\\\pages\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Chat.css';\nimport OpenAI from 'openai';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chat() {\n  _s();\n  const [novelText, setNovelText] = useState('');\n  const [userInput, setUserInput] = useState('');\n  const [imageURL, setImageURL] = useState('');\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const openai = new OpenAI();\n        const response = await openai.createImage({\n          apikey: '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',\n          // Replace with your actual API key\n          model: 'dall-e-3',\n          prompt: 'a white siamese cat',\n          n: 1,\n          size: '1024x1024'\n        });\n        setImageURL(response.data.data[0].url);\n      } catch (error) {\n        console.error('Error fetching image:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  const handleSendQuestion = async () => {\n    console.log('User Question:', userInput);\n    try {\n      const openai = new OpenAI();\n      const characterResponse = await openai.generateCharacterResponse(userInput); // Replace with your actual logic\n\n      setNovelText(prevText => `${prevText}\\n\\n${userInput}\\n${characterResponse}`);\n      setUserInput('');\n    } catch (error) {\n      console.error('Error generating character response:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat_container\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: imageURL,\n      alt: \"dalle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat_box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat_text_box\",\n        children: novelText && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"novel_text\",\n          children: novelText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat_input\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"chat_input_box\",\n          value: userInput,\n          onChange: e => setUserInput(e.target.value),\n          placeholder: \"Enter your question..\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn_submit\",\n          onClick: handleSendQuestion,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"icon_send\",\n            src: \"send.png\",\n            alt: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(Chat, \"Vuv8G9epCgZhaYJeyb5kshzdo6s=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","OpenAI","jsxDEV","_jsxDEV","Chat","_s","novelText","setNovelText","userInput","setUserInput","imageURL","setImageURL","fetchData","openai","response","createImage","apikey","model","prompt","n","size","data","url","error","console","handleSendQuestion","log","characterResponse","generateCharacterResponse","prevText","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Son/Desktop/민균/학교 수업/전공/ADL/WTN/blog/src/pages/Chat.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Chat.css';\r\nimport OpenAI from 'openai';\r\n\r\nfunction Chat() {\r\n  const [novelText, setNovelText] = useState('');\r\n  const [userInput, setUserInput] = useState('');\r\n  const [imageURL, setImageURL] = useState('');\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const openai = new OpenAI();\r\n        const response = await openai.createImage({\r\n          apikey: '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', // Replace with your actual API key\r\n          model: 'dall-e-3',\r\n          prompt: 'a white siamese cat',\r\n          n: 1,\r\n          size: '1024x1024',\r\n        });\r\n        setImageURL(response.data.data[0].url);\r\n      } catch (error) {\r\n        console.error('Error fetching image:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const handleSendQuestion = async () => {\r\n    console.log('User Question:', userInput);\r\n\r\n    try {\r\n      const openai = new OpenAI();\r\n      const characterResponse = await openai.generateCharacterResponse(userInput); // Replace with your actual logic\r\n\r\n      setNovelText((prevText) => `${prevText}\\n\\n${userInput}\\n${characterResponse}`);\r\n      setUserInput('');\r\n    } catch (error) {\r\n      console.error('Error generating character response:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat_container\">\r\n      <img src={imageURL} alt=\"dalle\" />\r\n      <div className=\"chat_box\">\r\n        <div className=\"chat_text_box\">\r\n          {novelText && <div className=\"novel_text\">{novelText}</div>}\r\n        </div>\r\n        <div className=\"chat_input\">\r\n          <textarea\r\n            className=\"chat_input_box\"\r\n            value={userInput}\r\n            onChange={(e) => setUserInput(e.target.value)}\r\n            placeholder=\"Enter your question..\"\r\n          />\r\n          <button className=\"btn_submit\" onClick={handleSendQuestion}>\r\n            <img className=\"icon_send\" src=\"send.png\" alt=\"send\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}